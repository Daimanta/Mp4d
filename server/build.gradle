plugins {
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}


java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    //implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.security:spring-security-crypto:5.7.3'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.13.4'
    implementation 'org.hibernate.orm:hibernate-community-dialects'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.xerial:sqlite-jdbc:3.42.0.1'
    implementation 'org.flywaydb:flyway-core:9.4.0'
    implementation 'net.jthink:jaudiotagger:3.0.1'

    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
}

tasks.named('test') {
    useJUnitPlatform()
}

jar {
    enabled = false
}

bootJar {
    manifest {
        attributes 'Implementation-Gitcommit': getCheckedOutGitCommitHash()
    }
}

def getCheckedOutGitCommitHash() {
    def gitFolder = "$rootDir/.git/"
    def takeFromHash = 12
    def file = new File(gitFolder + "HEAD")
    if (!file.exists()) return "No Git"
    def head = file.text.split(":")
    def isCommit = head.length == 1
    if(isCommit) return head[0].trim().take(takeFromHash)
    def refHead = new File(gitFolder + head[1].trim())
    if (!refHead.exists()) return "No Git"
    refHead.text.trim().take takeFromHash
}
